export class model {
  constructor(base, user, unusedUserAction) {
    this.base = base;
    this.internal = {};
    var internal = this.internal;
    internal.cell = 1;
    this.setUser(user, unusedUserAction);
  }
  initial(t) {
    var internal = this.internal;
    var state = Array(32).fill(0);
    state[0] = internal.initial_EGF;
    state[1] = internal.initial_NGF;
    state[2] = internal.initial_freeEGFReceptor;
    state[3] = internal.initial_boundEGFReceptor;
    state[4] = internal.initial_freeNGFReceptor;
    state[5] = internal.initial_boundNGFReceptor;
    state[6] = internal.initial_SosInactive;
    state[7] = internal.initial_SosActive;
    state[8] = internal.initial_P90RskInactive;
    state[9] = internal.initial_P90RskActive;
    state[10] = internal.initial_RasInactive;
    state[11] = internal.initial_RasActive;
    state[12] = internal.initial_RasGapActive;
    state[13] = internal.initial_Raf1Inactive;
    state[14] = internal.initial_Raf1Active;
    state[15] = internal.initial_BRafInactive;
    state[16] = internal.initial_BRafActive;
    state[17] = internal.initial_MekInactive;
    state[18] = internal.initial_MekActive;
    state[19] = internal.initial_ErkInactive;
    state[20] = internal.initial_ErkActive;
    state[21] = internal.initial_PI3KInactive;
    state[22] = internal.initial_PI3KActive;
    state[23] = internal.initial_AktInactive;
    state[24] = internal.initial_AktActive;
    state[25] = internal.initial_C3GInactive;
    state[26] = internal.initial_C3GActive;
    state[27] = internal.initial_Rap1Inactive;
    state[28] = internal.initial_Rap1Active;
    state[29] = internal.initial_RapGapActive;
    state[30] = internal.initial_PP2AActive;
    state[31] = internal.initial_Raf1PPtase;
    return state;
  }
  setUser(user, unusedUserAction) {
    this.base.user.checkUser(user, ["AktActive_init", "AktInactive_init", "boundEGFReceptor_init", "boundNGFReceptor_init", "BRafActive_init", "BRafInactive_init", "C3GActive_init", "C3GInactive_init", "EGF_init", "ErkActive_init", "ErkInactive_init", "freeEGFReceptor_init", "freeNGFReceptor_init", "kAkt", "kC3G", "kC3GNGF", "kdBRaf", "kdErk", "kdMek", "kdRaf1", "kdRaf1ByAkt", "kdSos", "kEGF", "KmAkt", "KmC3G", "KmC3GNGF", "KmdBRaf", "KmdErk", "KmdMek", "KmdRaf1", "KmdSos", "KmEGF", "KmNGF", "KmpBRaf", "KmPI3K", "KmPI3KRas", "KmpMekCytoplasmic", "KmpP90Rsk", "KmpRaf1", "KmRaf1ByAkt", "KmRap1ToBRaf", "KmRapGap", "KmRasGap", "KmRasToRaf1", "KmSos", "kNGF", "kpBRaf", "kPI3K", "kPI3KRas", "kpMekCytoplasmic", "kpP90Rsk", "kpRaf1", "kRap1ToBRaf", "kRapGap", "kRasGap", "kRasToRaf1", "krbEGF", "krbNGF", "kruEGF", "kruNGF", "kSos", "MekActive_init", "MekInactive_init", "NGF_init", "P90RskActive_init", "P90RskInactive_init", "PI3KActive_init", "PI3KInactive_init", "PP2AActive_init", "Raf1Active_init", "Raf1Inactive_init", "Raf1PPtase_init", "Rap1Active_init", "Rap1Inactive_init", "RapGapActive_init", "RasActive_init", "RasGapActive_init", "RasInactive_init", "SosActive_init", "SosInactive_init"], unusedUserAction);
    var internal = this.internal;
    this.base.user.setUserScalar(user, "AktActive_init", internal, 0, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "AktInactive_init", internal, 0, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "boundEGFReceptor_init", internal, 0, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "boundNGFReceptor_init", internal, 0, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "BRafActive_init", internal, 0, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "BRafInactive_init", internal, 0, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "C3GActive_init", internal, 0, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "C3GInactive_init", internal, 0, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "EGF_init", internal, 0, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "ErkActive_init", internal, 0, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "ErkInactive_init", internal, 0, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "freeEGFReceptor_init", internal, 0, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "freeNGFReceptor_init", internal, 0, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "kAkt", internal, 0.056627900000000002, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "kC3G", internal, 1.4014500000000001, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "kC3GNGF", internal, 146.91200000000001, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "kdBRaf", internal, 441.28699999999998, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "kdErk", internal, 8.8911999999999995, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "kdMek", internal, 2.83243, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "kdRaf1", internal, 0.126329, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "kdRaf1ByAkt", internal, 15.1212, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "kdSos", internal, 1611.97, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "kEGF", internal, 694.73099999999999, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "KmAkt", internal, 653951, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "KmC3G", internal, 10965.6, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "KmC3GNGF", internal, 12876.200000000001, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "KmdBRaf", internal, 10879500, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "KmdErk", internal, 3496490, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "KmdMek", internal, 518753, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "KmdRaf1", internal, 1061.71, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "KmdSos", internal, 896896, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "KmEGF", internal, 6086070, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "KmNGF", internal, 2112.6599999999999, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "KmpBRaf", internal, 157948, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "KmPI3K", internal, 184912, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "KmPI3KRas", internal, 272056, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "KmpMekCytoplasmic", internal, 1007340, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "KmpP90Rsk", internal, 763523, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "KmpRaf1", internal, 4768350, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "KmRaf1ByAkt", internal, 119355, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "KmRap1ToBRaf", internal, 1025460, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "KmRapGap", internal, 295990, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "KmRasGap", internal, 1432410, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "KmRasToRaf1", internal, 62464.599999999999, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "KmSos", internal, 35954.300000000003, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "kNGF", internal, 389.428, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "kpBRaf", internal, 125.089, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "kPI3K", internal, 10.6737, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "kPI3KRas", internal, 0.0771067, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "kpMekCytoplasmic", internal, 9.8536699999999993, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "kpP90Rsk", internal, 0.021369699999999998, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "kpRaf1", internal, 185.75899999999999, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "kRap1ToBRaf", internal, 2.2099500000000001, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "kRapGap", internal, 27.265000000000001, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "kRasGap", internal, 1509.3599999999999, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "kRasToRaf1", internal, 0.88409599999999999, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "krbEGF", internal, 2.18503e-05, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "krbNGF", internal, 1.3820899999999999e-07, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "kruEGF", internal, 0.0121008, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "kruNGF", internal, 0.0072381099999999999, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "kSos", internal, 32.344000000000001, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "MekActive_init", internal, 0, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "MekInactive_init", internal, 0, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "NGF_init", internal, 0, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "P90RskActive_init", internal, 0, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "P90RskInactive_init", internal, 0, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "PI3KActive_init", internal, 0, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "PI3KInactive_init", internal, 0, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "PP2AActive_init", internal, 0, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "Raf1Active_init", internal, 0, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "Raf1Inactive_init", internal, 0, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "Raf1PPtase_init", internal, 0, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "Rap1Active_init", internal, 0, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "Rap1Inactive_init", internal, 0, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "RapGapActive_init", internal, 0, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "RasActive_init", internal, 0, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "RasGapActive_init", internal, 0, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "RasInactive_init", internal, 0, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "SosActive_init", internal, 0, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "SosInactive_init", internal, 0, -Infinity, Infinity, false);
    internal.initial_AktActive = internal.AktActive_init;
    internal.initial_AktInactive = internal.AktInactive_init;
    internal.initial_boundEGFReceptor = internal.boundEGFReceptor_init;
    internal.initial_boundNGFReceptor = internal.boundNGFReceptor_init;
    internal.initial_BRafActive = internal.BRafActive_init;
    internal.initial_BRafInactive = internal.BRafInactive_init;
    internal.initial_C3GActive = internal.C3GActive_init;
    internal.initial_C3GInactive = internal.C3GInactive_init;
    internal.initial_EGF = internal.EGF_init;
    internal.initial_ErkActive = internal.ErkActive_init;
    internal.initial_ErkInactive = internal.ErkInactive_init;
    internal.initial_freeEGFReceptor = internal.freeEGFReceptor_init;
    internal.initial_freeNGFReceptor = internal.freeNGFReceptor_init;
    internal.initial_MekActive = internal.MekActive_init;
    internal.initial_MekInactive = internal.MekInactive_init;
    internal.initial_NGF = internal.NGF_init;
    internal.initial_P90RskActive = internal.P90RskActive_init;
    internal.initial_P90RskInactive = internal.P90RskInactive_init;
    internal.initial_PI3KActive = internal.PI3KActive_init;
    internal.initial_PI3KInactive = internal.PI3KInactive_init;
    internal.initial_PP2AActive = internal.PP2AActive_init;
    internal.initial_Raf1Active = internal.Raf1Active_init;
    internal.initial_Raf1Inactive = internal.Raf1Inactive_init;
    internal.initial_Raf1PPtase = internal.Raf1PPtase_init;
    internal.initial_Rap1Active = internal.Rap1Active_init;
    internal.initial_Rap1Inactive = internal.Rap1Inactive_init;
    internal.initial_RapGapActive = internal.RapGapActive_init;
    internal.initial_RasActive = internal.RasActive_init;
    internal.initial_RasGapActive = internal.RasGapActive_init;
    internal.initial_RasInactive = internal.RasInactive_init;
    internal.initial_SosActive = internal.SosActive_init;
    internal.initial_SosInactive = internal.SosInactive_init;
    this.updateMetadata();
  }
  getInternal() {
    return this.internal;
  }
  rhs(t, state, dstatedt) {
    var internal = this.internal;
    const EGF = state[0];
    const NGF = state[1];
    const freeEGFReceptor = state[2];
    const boundEGFReceptor = state[3];
    const freeNGFReceptor = state[4];
    const boundNGFReceptor = state[5];
    const SosInactive = state[6];
    const SosActive = state[7];
    const P90RskInactive = state[8];
    const P90RskActive = state[9];
    const RasInactive = state[10];
    const RasActive = state[11];
    const RasGapActive = state[12];
    const Raf1Inactive = state[13];
    const Raf1Active = state[14];
    const BRafInactive = state[15];
    const BRafActive = state[16];
    const MekInactive = state[17];
    const MekActive = state[18];
    const ErkInactive = state[19];
    const ErkActive = state[20];
    const PI3KInactive = state[21];
    const PI3KActive = state[22];
    const AktInactive = state[23];
    const AktActive = state[24];
    const C3GInactive = state[25];
    const C3GActive = state[26];
    const Rap1Inactive = state[27];
    const Rap1Active = state[28];
    const RapGapActive = state[29];
    const PP2AActive = state[30];
    const Raf1PPtase = state[31];
    dstatedt[30] = 0;
    dstatedt[31] = 0;
    dstatedt[29] = 0;
    dstatedt[12] = 0;
    dstatedt[24] = 0 + 1 * internal.cell * (internal.kAkt * PI3KActive * AktInactive / (AktInactive + internal.KmAkt));
    dstatedt[23] = 0 - 1 * internal.cell * (internal.kAkt * PI3KActive * AktInactive / (AktInactive + internal.KmAkt));
    dstatedt[3] = 0 + 1 * internal.cell * internal.krbEGF * EGF * freeEGFReceptor - 1 * internal.cell * internal.kruEGF * boundEGFReceptor;
    dstatedt[5] = 0 + 1 * internal.krbNGF * NGF * freeNGFReceptor * internal.cell - 1 * internal.kruNGF * boundNGFReceptor * internal.cell;
    dstatedt[16] = 0 + 1 * internal.cell * (internal.kRap1ToBRaf * Rap1Active * BRafInactive / (BRafInactive + internal.KmRap1ToBRaf)) - 1 * internal.cell * (internal.kdBRaf * Raf1PPtase * BRafActive / (BRafActive + internal.KmdBRaf));
    dstatedt[15] = 0 - 1 * internal.cell * (internal.kRap1ToBRaf * Rap1Active * BRafInactive / (BRafInactive + internal.KmRap1ToBRaf)) + 1 * internal.cell * (internal.kdBRaf * Raf1PPtase * BRafActive / (BRafActive + internal.KmdBRaf));
    dstatedt[26] = 0 + 1 * internal.cell * (internal.kC3GNGF * boundNGFReceptor * C3GInactive / (C3GInactive + internal.KmC3GNGF));
    dstatedt[25] = 0 - 1 * internal.cell * (internal.kC3GNGF * boundNGFReceptor * C3GInactive / (C3GInactive + internal.KmC3GNGF));
    dstatedt[0] = 0 - 1 * internal.cell * internal.krbEGF * EGF * freeEGFReceptor + 1 * internal.cell * internal.kruEGF * boundEGFReceptor;
    dstatedt[20] = 0 + 1 * internal.cell * (internal.kpMekCytoplasmic * MekActive * ErkInactive / (ErkInactive + internal.KmpMekCytoplasmic)) - 1 * internal.cell * (internal.kdErk * PP2AActive * ErkActive / (ErkActive + internal.KmdErk));
    dstatedt[19] = 0 - 1 * internal.cell * (internal.kpMekCytoplasmic * MekActive * ErkInactive / (ErkInactive + internal.KmpMekCytoplasmic)) + 1 * internal.cell * (internal.kdErk * PP2AActive * ErkActive / (ErkActive + internal.KmdErk));
    dstatedt[2] = 0 - 1 * internal.cell * internal.krbEGF * EGF * freeEGFReceptor + 1 * internal.cell * internal.kruEGF * boundEGFReceptor;
    dstatedt[4] = 0 - 1 * internal.krbNGF * NGF * freeNGFReceptor * internal.cell + 1 * internal.kruNGF * boundNGFReceptor * internal.cell;
    dstatedt[18] = 0 + 1 * internal.cell * (internal.kpRaf1 * Raf1Active * MekInactive / (MekInactive + internal.KmpRaf1)) + 1 * internal.cell * (internal.kpBRaf * BRafActive * MekInactive / (MekInactive + internal.KmpBRaf)) - 1 * internal.cell * (internal.kdMek * PP2AActive * MekActive / (MekActive + internal.KmdMek));
    dstatedt[17] = 0 - 1 * internal.cell * (internal.kpRaf1 * Raf1Active * MekInactive / (MekInactive + internal.KmpRaf1)) - 1 * internal.cell * (internal.kpBRaf * BRafActive * MekInactive / (MekInactive + internal.KmpBRaf)) + 1 * internal.cell * (internal.kdMek * PP2AActive * MekActive / (MekActive + internal.KmdMek));
    dstatedt[1] = 0 - 1 * internal.krbNGF * NGF * freeNGFReceptor * internal.cell + 1 * internal.kruNGF * boundNGFReceptor * internal.cell;
    dstatedt[9] = 0 + 1 * internal.cell * (internal.kpP90Rsk * ErkActive * P90RskInactive / (P90RskInactive + internal.KmpP90Rsk));
    dstatedt[8] = 0 - 1 * internal.cell * (internal.kpP90Rsk * ErkActive * P90RskInactive / (P90RskInactive + internal.KmpP90Rsk));
    dstatedt[22] = 0 + 1 * internal.cell * (internal.kPI3K * boundEGFReceptor * PI3KInactive / (PI3KInactive + internal.KmPI3K)) + 1 * internal.cell * (internal.kPI3KRas * RasActive * PI3KInactive / (PI3KInactive + internal.KmPI3KRas));
    dstatedt[21] = 0 - 1 * internal.cell * (internal.kPI3K * boundEGFReceptor * PI3KInactive / (PI3KInactive + internal.KmPI3K)) - 1 * internal.cell * (internal.kPI3KRas * RasActive * PI3KInactive / (PI3KInactive + internal.KmPI3KRas));
    dstatedt[14] = 0 + 1 * internal.cell * (internal.kRasToRaf1 * RasActive * Raf1Inactive / (Raf1Inactive + internal.KmRasToRaf1)) - 1 * internal.cell * (internal.kdRaf1 * Raf1PPtase * Raf1Active / (Raf1Active + internal.KmdRaf1)) - 1 * internal.cell * (internal.kdRaf1ByAkt * AktActive * Raf1Active / (Raf1Active + internal.KmRaf1ByAkt));
    dstatedt[13] = 0 - 1 * internal.cell * (internal.kRasToRaf1 * RasActive * Raf1Inactive / (Raf1Inactive + internal.KmRasToRaf1)) + 1 * internal.cell * (internal.kdRaf1 * Raf1PPtase * Raf1Active / (Raf1Active + internal.KmdRaf1)) + 1 * internal.cell * (internal.kdRaf1ByAkt * AktActive * Raf1Active / (Raf1Active + internal.KmRaf1ByAkt));
    dstatedt[28] = 0 + 1 * internal.cell * (internal.kC3G * C3GActive * Rap1Inactive / (Rap1Inactive + internal.KmC3G)) - 1 * internal.cell * (internal.kRapGap * RapGapActive * Rap1Active / (Rap1Active + internal.KmRapGap));
    dstatedt[27] = 0 - 1 * internal.cell * (internal.kC3G * C3GActive * Rap1Inactive / (Rap1Inactive + internal.KmC3G)) + 1 * internal.cell * (internal.kRapGap * RapGapActive * Rap1Active / (Rap1Active + internal.KmRapGap));
    dstatedt[11] = 0 + 1 * internal.cell * (internal.kSos * SosActive * RasInactive / (RasInactive + internal.KmSos)) - 1 * internal.cell * (internal.kRasGap * RasGapActive * RasActive / (RasActive + internal.KmRasGap));
    dstatedt[10] = 0 - 1 * internal.cell * (internal.kSos * SosActive * RasInactive / (RasInactive + internal.KmSos)) + 1 * internal.cell * (internal.kRasGap * RasGapActive * RasActive / (RasActive + internal.KmRasGap));
    dstatedt[7] = 0 + 1 * internal.cell * (internal.kEGF * boundEGFReceptor * SosInactive / (SosInactive + internal.KmEGF)) + 1 * internal.cell * (internal.kNGF * boundNGFReceptor * SosInactive / (SosInactive + internal.KmNGF)) - 1 * internal.cell * (internal.kdSos * P90RskActive * SosActive / (SosActive + internal.KmdSos));
    dstatedt[6] = 0 - 1 * internal.cell * (internal.kEGF * boundEGFReceptor * SosInactive / (SosInactive + internal.KmEGF)) - 1 * internal.cell * (internal.kNGF * boundNGFReceptor * SosInactive / (SosInactive + internal.KmNGF)) + 1 * internal.cell * (internal.kdSos * P90RskActive * SosActive / (SosActive + internal.KmdSos));
  }
  names() {
    return this.metadata.ynames.slice(1);
  }
  updateMetadata() {
    this.metadata = {};
    var internal = this.internal;
    this.metadata.ynames = ["t", "EGF", "NGF", "freeEGFReceptor", "boundEGFReceptor", "freeNGFReceptor", "boundNGFReceptor", "SosInactive", "SosActive", "P90RskInactive", "P90RskActive", "RasInactive", "RasActive", "RasGapActive", "Raf1Inactive", "Raf1Active", "BRafInactive", "BRafActive", "MekInactive", "MekActive", "ErkInactive", "ErkActive", "PI3KInactive", "PI3KActive", "AktInactive", "AktActive", "C3GInactive", "C3GActive", "Rap1Inactive", "Rap1Active", "RapGapActive", "PP2AActive", "Raf1PPtase"];
    this.metadata.internalOrder = {AktActive_init: null, AktInactive_init: null, boundEGFReceptor_init: null, boundNGFReceptor_init: null, BRafActive_init: null, BRafInactive_init: null, C3GActive_init: null, C3GInactive_init: null, cell: null, EGF_init: null, ErkActive_init: null, ErkInactive_init: null, freeEGFReceptor_init: null, freeNGFReceptor_init: null, initial_AktActive: null, initial_AktInactive: null, initial_boundEGFReceptor: null, initial_boundNGFReceptor: null, initial_BRafActive: null, initial_BRafInactive: null, initial_C3GActive: null, initial_C3GInactive: null, initial_EGF: null, initial_ErkActive: null, initial_ErkInactive: null, initial_freeEGFReceptor: null, initial_freeNGFReceptor: null, initial_MekActive: null, initial_MekInactive: null, initial_NGF: null, initial_P90RskActive: null, initial_P90RskInactive: null, initial_PI3KActive: null, initial_PI3KInactive: null, initial_PP2AActive: null, initial_Raf1Active: null, initial_Raf1Inactive: null, initial_Raf1PPtase: null, initial_Rap1Active: null, initial_Rap1Inactive: null, initial_RapGapActive: null, initial_RasActive: null, initial_RasGapActive: null, initial_RasInactive: null, initial_SosActive: null, initial_SosInactive: null, kAkt: null, kC3G: null, kC3GNGF: null, kdBRaf: null, kdErk: null, kdMek: null, kdRaf1: null, kdRaf1ByAkt: null, kdSos: null, kEGF: null, KmAkt: null, KmC3G: null, KmC3GNGF: null, KmdBRaf: null, KmdErk: null, KmdMek: null, KmdRaf1: null, KmdSos: null, KmEGF: null, KmNGF: null, KmpBRaf: null, KmPI3K: null, KmPI3KRas: null, KmpMekCytoplasmic: null, KmpP90Rsk: null, KmpRaf1: null, KmRaf1ByAkt: null, KmRap1ToBRaf: null, KmRapGap: null, KmRasGap: null, KmRasToRaf1: null, KmSos: null, kNGF: null, kpBRaf: null, kPI3K: null, kPI3KRas: null, kpMekCytoplasmic: null, kpP90Rsk: null, kpRaf1: null, kRap1ToBRaf: null, kRapGap: null, kRasGap: null, kRasToRaf1: null, krbEGF: null, krbNGF: null, kruEGF: null, kruNGF: null, kSos: null, MekActive_init: null, MekInactive_init: null, NGF_init: null, P90RskActive_init: null, P90RskInactive_init: null, PI3KActive_init: null, PI3KInactive_init: null, PP2AActive_init: null, Raf1Active_init: null, Raf1Inactive_init: null, Raf1PPtase_init: null, Rap1Active_init: null, Rap1Inactive_init: null, RapGapActive_init: null, RasActive_init: null, RasGapActive_init: null, RasInactive_init: null, SosActive_init: null, SosInactive_init: null};
    this.metadata.variableOrder = {EGF: null, NGF: null, freeEGFReceptor: null, boundEGFReceptor: null, freeNGFReceptor: null, boundNGFReceptor: null, SosInactive: null, SosActive: null, P90RskInactive: null, P90RskActive: null, RasInactive: null, RasActive: null, RasGapActive: null, Raf1Inactive: null, Raf1Active: null, BRafInactive: null, BRafActive: null, MekInactive: null, MekActive: null, ErkInactive: null, ErkActive: null, PI3KInactive: null, PI3KActive: null, AktInactive: null, AktActive: null, C3GInactive: null, C3GActive: null, Rap1Inactive: null, Rap1Active: null, RapGapActive: null, PP2AActive: null, Raf1PPtase: null};
    this.metadata.outputOrder = null;
  }
  getMetadata() {
    return this.metadata;
  }
}
