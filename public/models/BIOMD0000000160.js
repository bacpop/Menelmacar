export class model {
  constructor(base, user, unusedUserAction) {
    this.base = base;
    this.internal = {};
    var internal = this.internal;
    internal.CYC = 1;
    internal.wholeCell = 1;
    this.setUser(user, unusedUserAction);
  }
  initial(t) {
    var internal = this.internal;
    var state = Array(24).fill(0);
    state[0] = internal.initial_CC;
    state[1] = internal.initial_CCPT;
    state[2] = internal.initial_clkp;
    state[3] = internal.initial_perp;
    state[4] = internal.initial_clkm;
    state[5] = internal.initial_perm;
    state[6] = internal.initial_PT;
    state[7] = internal.initial_vrip;
    state[8] = internal.initial_vrim;
    state[9] = internal.initial_VRI;
    state[10] = internal.initial_pdpp;
    state[11] = internal.initial_pdpm;
    state[12] = internal.initial_PDP;
    state[13] = internal.initial_CLK;
    state[14] = internal.initial_PER;
    state[15] = internal.initial_timp;
    state[16] = internal.initial_timm;
    state[17] = internal.initial_TIM;
    state[18] = internal.initial_prcper;
    state[19] = internal.initial_prcv;
    state[20] = internal.initial_prcpdp;
    state[21] = internal.initial_prvc;
    state[22] = internal.initial_prpc;
    state[23] = internal.initial_prct;
    return state;
  }
  setUser(user, unusedUserAction) {
    this.base.user.checkUser(user, ["bcc", "bccpdpp", "bccperp", "bccpt", "bcctimp", "bccvrip", "bpdpclkp", "bpt", "bvriclkp", "CC_init", "CCPT_init", "CLK_init", "clkm_init", "clkp_init", "dcc", "dccpt", "dclk", "dclkm", "dpdp", "dpdpm", "dper", "dperm", "dpt", "dtim", "dtimm", "dvri", "dvrim", "npdp", "npt", "nvri", "PDP_init", "pdpm_init", "pdpp_init", "PER_init", "perm_init", "perp_init", "prcpdp_init", "prcper_init", "prct_init", "prcv_init", "prpc_init", "prvc_init", "PT_init", "tcccpdpp", "tcccperp", "tccctimp", "tcccvrip", "tcclkp", "tcdvpmt", "tcpdpclkp", "tcvriclkp", "TIM_init", "timm_init", "timp_init", "tlclk", "tlpdp", "tlper", "tltim", "tlvri", "ubcc", "ubccpdpp", "ubccperp", "ubccpt", "ubcctimp", "ubccvrip", "ubpdpclkp", "ubpt", "ubvriclkp", "VRI_init", "vrim_init", "vrip_init"], unusedUserAction);
    var internal = this.internal;
    this.base.user.setUserScalar(user, "bcc", internal, 2.3490000000000002, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "bccpdpp", internal, 0.062, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "bccperp", internal, 0.069000000000000006, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "bccpt", internal, 51, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "bcctimp", internal, 0.069000000000000006, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "bccvrip", internal, 0.10000000000000001, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "bpdpclkp", internal, 1.155, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "bpt", internal, 1.1000000000000001, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "bvriclkp", internal, 1.8580000000000001, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "CC_init", internal, 0.55659999999999998, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "CCPT_init", internal, 0.49819999999999998, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "CLK_init", internal, 3.6627999999999998, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "clkm_init", internal, 0.25829999999999997, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "clkp_init", internal, 0.0031849999999999999, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "dcc", internal, 0.184, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "dccpt", internal, 15.06, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "dclk", internal, 0.20000000000000001, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "dclkm", internal, 0.64300000000000002, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "dpdp", internal, 0.156, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "dpdpm", internal, 0.059999999999999998, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "dper", internal, 0.62, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "dperm", internal, 0.052999999999999999, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "dpt", internal, 0.27900000000000003, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "dtim", internal, 0.62, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "dtimm", internal, 0.052999999999999999, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "dvri", internal, 1.226, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "dvrim", internal, 0.070000000000000007, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "npdp", internal, 6, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "npt", internal, 5, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "nvri", internal, 4, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "PDP_init", internal, 4.1952999999999996, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "pdpm_init", internal, 0.3175, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "pdpp_init", internal, 0.0031849999999999999, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "PER_init", internal, 2.7526999999999999, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "perm_init", internal, 0.23949999999999999, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "perp_init", internal, 0.0031849999999999999, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "prcpdp_init", internal, 0.080000000000000002, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "prcper_init", internal, 0.043099999999999999, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "prct_init", internal, 0.042999999999999997, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "prcv_init", internal, 0.058500000000000003, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "prpc_init", internal, 0.42599999999999999, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "prvc_init", internal, 0.48899999999999999, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "PT_init", internal, 0.40139999999999998, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "tcccpdpp", internal, 9.8309999999999995, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "tcccperp", internal, 11, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "tccctimp", internal, 11, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "tcccvrip", internal, 16.859999999999999, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "tcclkp", internal, 1.4199999999999999, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "tcdvpmt", internal, 0.028000000000000001, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "tcpdpclkp", internal, 125.54000000000001, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "tcvriclkp", internal, 0.052999999999999999, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "TIM_init", internal, 2.7526999999999999, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "timm_init", internal, 0.23949999999999999, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "timp_init", internal, 0.0031849999999999999, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "tlclk", internal, 35, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "tlpdp", internal, 1.8700000000000001, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "tlper", internal, 36, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "tltim", internal, 36, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "tlvri", internal, 14.68, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "ubcc", internal, 0.89000000000000001, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "ubccpdpp", internal, 0.14499999999999999, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "ubccperp", internal, 0.26200000000000001, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "ubccpt", internal, 7.8899999999999997, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "ubcctimp", internal, 0.26200000000000001, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "ubccvrip", internal, 0.27600000000000002, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "ubpdpclkp", internal, 0.95199999999999996, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "ubpt", internal, 2.9300000000000002, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "ubvriclkp", internal, 1.0429999999999999, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "VRI_init", internal, 3.1749999999999998, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "vrim_init", internal, 0.2571, -Infinity, Infinity, false);
    this.base.user.setUserScalar(user, "vrip_init", internal, 0.0031849999999999999, -Infinity, Infinity, false);
    internal.initial_CC = internal.CC_init;
    internal.initial_CCPT = internal.CCPT_init;
    internal.initial_CLK = internal.CLK_init;
    internal.initial_clkm = internal.clkm_init;
    internal.initial_clkp = internal.clkp_init;
    internal.initial_PDP = internal.PDP_init;
    internal.initial_pdpm = internal.pdpm_init;
    internal.initial_pdpp = internal.pdpp_init;
    internal.initial_PER = internal.PER_init;
    internal.initial_perm = internal.perm_init;
    internal.initial_perp = internal.perp_init;
    internal.initial_prcpdp = internal.prcpdp_init;
    internal.initial_prcper = internal.prcper_init;
    internal.initial_prct = internal.prct_init;
    internal.initial_prcv = internal.prcv_init;
    internal.initial_prpc = internal.prpc_init;
    internal.initial_prvc = internal.prvc_init;
    internal.initial_PT = internal.PT_init;
    internal.initial_TIM = internal.TIM_init;
    internal.initial_timm = internal.timm_init;
    internal.initial_timp = internal.timp_init;
    internal.initial_VRI = internal.VRI_init;
    internal.initial_vrim = internal.vrim_init;
    internal.initial_vrip = internal.vrip_init;
    this.updateMetadata();
  }
  getInternal() {
    return this.internal;
  }
  rhs(t, state, dstatedt) {
    var internal = this.internal;
    const CC = state[0];
    const CCPT = state[1];
    const clkp = state[2];
    const perp = state[3];
    const clkm = state[4];
    const perm = state[5];
    const PT = state[6];
    const vrip = state[7];
    const vrim = state[8];
    const VRI = state[9];
    const pdpp = state[10];
    const pdpm = state[11];
    const PDP = state[12];
    const CLK = state[13];
    const PER = state[14];
    const timp = state[15];
    const timm = state[16];
    const TIM = state[17];
    const prcper = state[18];
    const prcv = state[19];
    const prcpdp = state[20];
    const prvc = state[21];
    const prpc = state[22];
    const prct = state[23];
    dstatedt[2] = 0;
    dstatedt[10] = 0;
    dstatedt[3] = 0;
    dstatedt[15] = 0;
    dstatedt[7] = 0;
    dstatedt[0] = 0 - 1 * internal.wholeCell * CC * PT * internal.bccpt - 1 * internal.wholeCell * CC * internal.dcc + 1 * internal.wholeCell * CLK * internal.bcc * internal.CYC - 1 * internal.wholeCell * CC * internal.ubcc + 1 * internal.wholeCell * CCPT * internal.ubccpt;
    dstatedt[1] = 0 + 1 * internal.wholeCell * CC * PT * internal.bccpt - 1 * internal.wholeCell * CCPT * internal.dccpt - 1 * internal.wholeCell * CCPT * internal.ubccpt;
    dstatedt[13] = 0 + 1 * internal.wholeCell * clkm * internal.tlclk - 1 * internal.wholeCell * CLK * internal.bcc * internal.CYC - 1 * internal.wholeCell * CLK * internal.dclk + 1 * internal.wholeCell * CC * internal.ubcc;
    dstatedt[4] = 0 - 1 * internal.wholeCell * clkm * internal.dclkm + 1 * internal.wholeCell * (prvc * internal.tcvriclkp + prpc * internal.tcpdpclkp + (1 - prvc - prpc) * internal.tcclkp) * clkp;
    dstatedt[12] = 0 + 1 * internal.wholeCell * pdpm * internal.tlpdp - 1 * internal.wholeCell * PDP * internal.dpdp;
    dstatedt[11] = 0 + 1 * internal.wholeCell * ((1 - Math.pow((1 - prcpdp), (internal.npdp))) * internal.tcccpdpp + Math.pow((1 - prcpdp), (internal.npdp)) * internal.tcdvpmt) * pdpp - 1 * internal.wholeCell * pdpm * internal.dpdpm;
    dstatedt[14] = 0 + 1 * internal.wholeCell * perm * internal.tlper - 1 * internal.wholeCell * PER * TIM * internal.bpt + 1 * internal.wholeCell * PT * internal.ubpt - 1 * internal.wholeCell * PER * internal.dper;
    dstatedt[5] = 0 - 1 * internal.wholeCell * perm * internal.dperm + 1 * internal.wholeCell * ((1 - Math.pow((1 - prcper), (internal.npt))) * internal.tcccperp + Math.pow((1 - prcper), (internal.npt)) * internal.tcdvpmt) * perp;
    dstatedt[20] = 0 - 1 * internal.wholeCell * internal.ubccpdpp * prcpdp + 1 * internal.wholeCell * (1 - prcpdp) * internal.bccpdpp * CC;
    dstatedt[18] = 0 + 1 * internal.wholeCell * (1 - prcper) * internal.bccperp * CC - 1 * internal.wholeCell * prcper * internal.ubccperp;
    dstatedt[23] = 0 + 1 * internal.wholeCell * (1 - prct) * internal.bcctimp * CC - 1 * internal.wholeCell * prct * internal.ubcctimp;
    dstatedt[19] = 0 - 1 * internal.wholeCell * internal.ubccvrip * prcv + 1 * internal.wholeCell * (1 - prcv) * internal.bccvrip * CC;
    dstatedt[22] = 0 + 1 * internal.wholeCell * (1 - prvc - prpc) * internal.bpdpclkp * PDP - 1 * internal.wholeCell * prpc * internal.ubpdpclkp;
    dstatedt[21] = 0 + 1 * internal.wholeCell * (1 - prvc - prpc) * internal.bvriclkp * VRI - 1 * internal.wholeCell * prvc * internal.ubvriclkp;
    dstatedt[6] = 0 - 1 * internal.wholeCell * CC * PT * internal.bccpt - 1 * internal.wholeCell * PT * internal.dpt + 1 * internal.wholeCell * PER * TIM * internal.bpt - 1 * internal.wholeCell * PT * internal.ubpt + 1 * internal.wholeCell * CCPT * internal.ubccpt;
    dstatedt[17] = 0 - 1 * internal.wholeCell * PER * TIM * internal.bpt + 1 * internal.wholeCell * PT * internal.ubpt + 1 * internal.wholeCell * timm * internal.tltim - 1 * internal.wholeCell * TIM * internal.dtim;
    dstatedt[16] = 0 + 1 * internal.wholeCell * ((1 - Math.pow((1 - prct), (internal.npt))) * internal.tccctimp + Math.pow((1 - prct), (internal.npt)) * internal.tcdvpmt) * timp - 1 * internal.wholeCell * timm * internal.dtimm;
    dstatedt[9] = 0 + 1 * internal.wholeCell * vrim * internal.tlvri - 1 * internal.wholeCell * VRI * internal.dvri;
    dstatedt[8] = 0 + 1 * internal.wholeCell * ((1 - Math.pow((1 - prcv), (internal.nvri))) * internal.tcccvrip + Math.pow((1 - prcv), (internal.nvri)) * internal.tcdvpmt) * vrip - 1 * internal.wholeCell * vrim * internal.dvrim;
  }
  names() {
    return this.metadata.ynames.slice(1);
  }
  updateMetadata() {
    this.metadata = {};
    var internal = this.internal;
    this.metadata.ynames = ["t", "CC", "CCPT", "clkp", "perp", "clkm", "perm", "PT", "vrip", "vrim", "VRI", "pdpp", "pdpm", "PDP", "CLK", "PER", "timp", "timm", "TIM", "prcper", "prcv", "prcpdp", "prvc", "prpc", "prct"];
    this.metadata.internalOrder = {bcc: null, bccpdpp: null, bccperp: null, bccpt: null, bcctimp: null, bccvrip: null, bpdpclkp: null, bpt: null, bvriclkp: null, CC_init: null, CCPT_init: null, CLK_init: null, clkm_init: null, clkp_init: null, CYC: null, dcc: null, dccpt: null, dclk: null, dclkm: null, dpdp: null, dpdpm: null, dper: null, dperm: null, dpt: null, dtim: null, dtimm: null, dvri: null, dvrim: null, initial_CC: null, initial_CCPT: null, initial_CLK: null, initial_clkm: null, initial_clkp: null, initial_PDP: null, initial_pdpm: null, initial_pdpp: null, initial_PER: null, initial_perm: null, initial_perp: null, initial_prcpdp: null, initial_prcper: null, initial_prct: null, initial_prcv: null, initial_prpc: null, initial_prvc: null, initial_PT: null, initial_TIM: null, initial_timm: null, initial_timp: null, initial_VRI: null, initial_vrim: null, initial_vrip: null, npdp: null, npt: null, nvri: null, PDP_init: null, pdpm_init: null, pdpp_init: null, PER_init: null, perm_init: null, perp_init: null, prcpdp_init: null, prcper_init: null, prct_init: null, prcv_init: null, prpc_init: null, prvc_init: null, PT_init: null, tcccpdpp: null, tcccperp: null, tccctimp: null, tcccvrip: null, tcclkp: null, tcdvpmt: null, tcpdpclkp: null, tcvriclkp: null, TIM_init: null, timm_init: null, timp_init: null, tlclk: null, tlpdp: null, tlper: null, tltim: null, tlvri: null, ubcc: null, ubccpdpp: null, ubccperp: null, ubccpt: null, ubcctimp: null, ubccvrip: null, ubpdpclkp: null, ubpt: null, ubvriclkp: null, VRI_init: null, vrim_init: null, vrip_init: null, wholeCell: null};
    this.metadata.variableOrder = {CC: null, CCPT: null, clkp: null, perp: null, clkm: null, perm: null, PT: null, vrip: null, vrim: null, VRI: null, pdpp: null, pdpm: null, PDP: null, CLK: null, PER: null, timp: null, timm: null, TIM: null, prcper: null, prcv: null, prcpdp: null, prvc: null, prpc: null, prct: null};
    this.metadata.outputOrder = null;
  }
  getMetadata() {
    return this.metadata;
  }
}
